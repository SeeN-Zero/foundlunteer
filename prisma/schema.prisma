// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  name         String
  address      String
  phone        String
  role         Role
  image        Boolean?
  Individual   Individual?   @relation("UserIndividual")
  Organization Organization? @relation("UserOrganization")
  token        Token?        @relation("UserToken")
  createdAt    DateTime      @default(now())
}

model Token {
  id        String   @id @default(uuid())
  email     String   @unique
  code      Int
  isValid   Boolean  @default(true)
  createdAt DateTime
  expireAt  DateTime
  userEmail User     @relation(name: "UserToken", fields: [email], references: [email])
}

model Individual {
  id          String         @unique
  user        User           @relation(name: "UserIndividual", fields: [id], references: [id])
  age         Int?
  description String?
  social      String?
  cv          Boolean?
  ijazah      Boolean?
  sertifikat  Boolean?
  list        UserList?      @relation("IndividualOnUserList")
  registered  Registration[] @relation("IndividualOnRegistration")
}

model Organization {
  id          String  @unique
  user        User    @relation(name: "UserOrganization", fields: [id], references: [id])
  leader      String?
  description String?
  social      String?
  job         Job[]   @relation("OrganizationOnJob")
}

model Job {
  id             String         @id @default(uuid())
  title          String
  description    String
  location       String         @default("Jakarta")
  jobStatus      JobStatus      @default(OPEN)
  registrant     Registration[] @relation("JobOnRegistration")
  userList       UserList[]
  organizationId String
  organization   Organization   @relation(name: "OrganizationOnJob", fields: [organizationId], references: [id])
  createdAt      DateTime       @default(now())
  expiredAt      DateTime       @default(now())
}

// Relation
model Registration {
  individualId       String
  individual         Individual         @relation(name: "IndividualOnRegistration", fields: [individualId], references: [id])
  jobId              String
  job                Job                @relation(name: "JobOnRegistration", fields: [jobId], references: [id])
  registrationStatus RegistrationStatus
  registeredAt       DateTime           @default(now())

  @@id([individualId, jobId])
}

model UserList {
  id           String     @id @default(uuid())
  individualId String     @unique
  individual   Individual @relation(name: "IndividualOnUserList", fields: [individualId], references: [id])
  jobs         Job[]
}

enum RegistrationStatus {
  ONPROCESS
  REJECTED
  ACCEPTED
}

enum JobStatus {
  OPEN
  CLOSE
}

enum Role {
  INDIVIDUAL
  ORGANIZATION
}
